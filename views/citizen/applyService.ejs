<div class="container d-flex justify-content-center">
    <div class="card shadow border-0 rounded-4 p-5 my-5 w-100 modern-card" style="max-width: 720px;">

        <!-- Header -->
        <div class="text-center mb-5">
            <div class="icon-circle mx-auto mb-3">
                <i class="bi bi-file-earmark-plus-fill fs-1 text-white"></i>
            </div>
            <h2 class="fw-bold mb-0 gradient-text">Apply for Service</h2>
            <p class="text-muted mt-2">Fill in the details below to get started</p>
        </div>

        <form action="/citizen/applyService" method="POST" enctype="multipart/form-data">

            <!-- Department -->
            <div class="mb-4">
                <label for="departmentSelect" class="form-label fw-semibold text-muted">
                    <i class="bi bi-building me-2 text-primary"></i> Department
                </label>
                <select id="departmentSelect" name="department"
                        class="form-select form-select-lg rounded-pill shadow-sm modern-input">
                    <option value="" disabled selected>Choose a Department</option>
                    <% departments.forEach(d => { %>
                        <option value="<%= d.id %>"><%= d.name %></option>
                    <% }) %>
                </select>
            </div>

            <!-- Service -->
            <div class="mb-4">
                <label for="serviceSelect" class="form-label fw-semibold text-muted">
                    <i class="bi bi-gear-fill me-2 text-secondary"></i> Service
                </label>
                <select id="serviceSelect" name="service"
                        class="form-select form-select-lg rounded-pill shadow-sm modern-input">
                    <option value="" disabled selected>Select Service</option>
                </select>
                <!-- Service Fee -->
                <div class="my-4" id="serviceFeeBox" style="display: none;">
                    <label class="form-label fw-semibold text-muted">
                        <i class="bi bi-cash-coin me-2 text-success"></i> Service Fee
                    </label>
                    <div class="p-3 border bg-light fw-bold text-primary" id="serviceFee"></div>
                </div>

            </div>

            <!-- Upload -->
            <div class="mb-4">
                <label class="form-label fw-semibold text-muted">
                    <i class="bi bi-upload me-2 text-warning"></i> Upload Documents
                </label>

                <div id="uploadBox"
                     class="upload-box text-center p-4 rounded-4 border border-2 border-dashed shadow-sm">
                    <!-- Default placeholder -->
                    <div id="uploadPlaceholder">
                        <i class="bi bi-cloud-arrow-up-fill text-success fs-1"></i>
                        <p class="mt-2 mb-1 fw-semibold">Drag & drop files here</p>
                        <p class="text-muted small">or</p>
                        <label for="documents" class="btn btn-outline-success rounded-pill px-4 py-2 fw-semibold">
                            <i class="bi bi-folder2-open me-2"></i> Browse Files
                        </label>
                        <div class="form-text mt-2">
                            Accepted formats: <span class="fw-semibold">PDF, JPG, PNG</span>
                        </div>
                    </div>

                    <!-- File previews -->
                    <div id="fileList" class="mt-3 d-flex flex-wrap gap-3 justify-content-center"></div>

                    <input type="file" id="documents" name="documents" multiple hidden>
                </div>
            </div>

            <!-- Submit -->
            <div class="d-grid">
                <button class="btn btn-gradient btn-lg rounded-pill shadow d-flex align-items-center justify-content-center gap-2">
                    <i class="bi bi-check-circle-fill"></i>
                    Submit Application
                </button>
            </div>
        </form>
    </div>
</div>

<style>
    .upload-box.dragover {
        background: #f0fff4;
        border-color: #4CAF50;
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.15);
    }

    .file-preview {
        position: relative;
        width: 100%;
        height: 80%;
        border-radius: 12px;
        overflow: hidden;
        background: #f8f9fa;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        text-align: center;
        padding: 4px;
    }

    .file-preview img {
        max-width: 100%;
        max-height: 100%;
        object-fit: cover;
    }

    .remove-btn {
        position: absolute;
        top: 4px;
        right: 4px;
        background: rgba(0, 0, 0, 0.6);
        color: white;
        border: none;
        border-radius: 50%;
        width: 22px;
        height: 22px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 14px;
        cursor: pointer;
    }

    .remove-btn:hover {
        background: rgba(220, 53, 69, 0.8);
    }

    /* Card with subtle gradient */
    .modern-card {
        background: linear-gradient(135deg, #ffffff, #f9fafc);
    }

    /* Circle icon header */
    .icon-circle {
        width: 70px;
        height: 70px;
        border-radius: 50%;
        background: linear-gradient(135deg, #4CAF50, #2E7D32);
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 8px 20px rgba(76, 175, 80, 0.3);
    }

    /* Gradient text effect */
    .gradient-text {
        background: linear-gradient(90deg, #4CAF50, #2E7D32);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    /* Inputs */
    .modern-input {
        transition: all 0.3s ease;
        border: 1px solid #e0e0e0;
        padding-left: 1.2rem;
    }

    .modern-input:focus {
        border-color: #4CAF50;
        box-shadow: 0 0 0 0.25rem rgba(76, 175, 80, 0.25);
    }

    /* Gradient button */
    .btn-gradient {
        background: linear-gradient(135deg, #4CAF50, #2E7D32);
        border: none;
        color: white;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .btn-gradient:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(76, 175, 80, 0.4);
    }
</style>

<script>
    <!--  department Select  -->
    document.getElementById("departmentSelect").addEventListener("change", async function () {
        const deptId = this.value;
        const serviceSelect = document.getElementById("serviceSelect");
        serviceSelect.innerHTML = `<option value=""> Select Service </option>`; // reset

        if (deptId) {
            try {
                const res = await fetch(`/citizen/services/${deptId}`);
                const services = await res.json();

                services.forEach(s => {
                    const option = document.createElement("option");
                    option.value = s.id;
                    option.textContent = s.name;
                    option.dataset.fee = s.fee;
                    serviceSelect.appendChild(option);
                });
            } catch (err) {
                console.error("Error fetching services:", err);
            }
        }
    });
    // Show fee when a service is selected
    document.getElementById("serviceSelect").addEventListener("change", function () {
        const selectedOption = this.options[this.selectedIndex];
        const feeBox = document.getElementById("serviceFeeBox");
        const feeDisplay = document.getElementById("serviceFee");

        if (selectedOption && selectedOption.dataset.fee) {
            feeDisplay.textContent = `$  ${selectedOption.dataset.fee}  `;
            feeBox.style.display = "block";
        } else {
            feeBox.style.display = "none";
        }
    });


    const uploadBox = document.getElementById("uploadBox");
    const fileInput = document.getElementById("documents");
    const fileList = document.getElementById("fileList");
    const uploadPlaceholder = document.getElementById("uploadPlaceholder");

    let selectedFiles = [];

    // Prevent default drag behavior
    ["dragenter", "dragover", "dragleave", "drop"].forEach(event =>
        uploadBox.addEventListener(event, e => e.preventDefault())
    );

    // Highlight drag area
    ["dragenter", "dragover"].forEach(event =>
        uploadBox.addEventListener(event, () => uploadBox.classList.add("dragover"))
    );
    ["dragleave", "drop"].forEach(event =>
        uploadBox.addEventListener(event, () => uploadBox.classList.remove("dragover"))
    );

    // Handle dropped files
    uploadBox.addEventListener("drop", e => handleFiles(e.dataTransfer.files));

    // Handle file input change
    fileInput.addEventListener("change", () => handleFiles(fileInput.files));

    function handleFiles(files) {
        selectedFiles = [...selectedFiles, ...Array.from(files)];
        updateFileInput();
        renderFileList();
    }

    // Update hidden input so form submits the files
    function updateFileInput() {
        const dt = new DataTransfer();
        selectedFiles.forEach(file => dt.items.add(file));
        fileInput.files = dt.files;
    }

    // Render file previews
    function renderFileList() {
        fileList.innerHTML = "";
        uploadPlaceholder.style.display = selectedFiles.length ? "none" : "block";

        selectedFiles.forEach((file, index) => {
            const preview = document.createElement("div");
            preview.classList.add("file-preview");

            if (file.type.startsWith("image/")) {
                const img = document.createElement("img");
                img.src = URL.createObjectURL(file);
                preview.appendChild(img);
            } else if (file.type === "application/pdf") {
                preview.innerHTML = `<i class="bi bi-file-earmark-pdf-fill text-danger fs-2"></i><br>${file.name}`;
            } else {
                preview.innerHTML = `<i class="bi bi-file-earmark-fill text-secondary fs-2"></i><br>${file.name}`;
            }

            // Remove button
            const removeBtn = document.createElement("button");
            removeBtn.innerHTML = "&times;";
            removeBtn.classList.add("remove-btn");
            removeBtn.addEventListener("click", () => {
                selectedFiles.splice(index, 1);
                updateFileInput();
                renderFileList();
            });

            preview.appendChild(removeBtn);
            fileList.appendChild(preview);
        });
    }

</script>